// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    public partial class SearchModuleApiClient : ServiceClient<SearchModuleApiClient>, ISearchModuleApiClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }        

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the ISearchModule.
        /// </summary>
        public virtual ISearchModule SearchModule { get; private set; }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SearchModuleApiClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SearchModuleApiClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SearchModuleApiClient(Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SearchModuleApiClient(Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SearchModuleApiClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SearchModuleApiClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SearchModuleApiClient(Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the SearchModuleApiClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public SearchModuleApiClient(Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary> 
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.SearchModule = new SearchModule(this);
            this.BaseUri = new Uri("http://localhost/admin");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }    
    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// </summary>
    public partial interface ISearchModuleApiClient : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Gets the ISearchModule.
        /// </summary>
        ISearchModule SearchModule { get; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    /// <summary>
    /// SearchModule operations.
    /// </summary>
    public partial class SearchModule : IServiceOperations<SearchModuleApiClient>, ISearchModule
    {
        /// <summary>
        /// Initializes a new instance of the SearchModule class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        public SearchModule(SearchModuleApiClient client)
        {
            if (client == null) 
            {
                throw new ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the SearchModuleApiClient
        /// </summary>
        public SearchModuleApiClient Client { get; private set; }

        /// <summary>
        /// Get filter properties for store
        /// </summary>
        /// Returns all store catalog properties: selected properties are ordered
        /// manually, unselected properties are ordered by name.
        /// <param name='storeId'>
        /// Store ID
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<IList<FilterProperty>>> GetFilterPropertiesWithHttpMessagesAsync(string storeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (storeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "storeId");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("storeId", storeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetFilterProperties", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "api/search/storefilterproperties/{storeId}").ToString();
            _url = _url.Replace("{storeId}", Uri.EscapeDataString(storeId));
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<FilterProperty>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<FilterProperty>>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Set filter properties for store
        /// </summary>
        /// <param name='storeId'>
        /// Store ID
        /// </param>
        /// <param name='filterProperties'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse> SetFilterPropertiesWithHttpMessagesAsync(string storeId, IList<FilterProperty> filterProperties, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (storeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "storeId");
            }
            if (filterProperties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "filterProperties");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("storeId", storeId);
                tracingParameters.Add("filterProperties", filterProperties);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "SetFilterProperties", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "api/search/storefilterproperties/{storeId}").ToString();
            _url = _url.Replace("{storeId}", Uri.EscapeDataString(storeId));
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(filterProperties != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(filterProperties, this.Client.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Search for products and categories
        /// </summary>
        /// <param name='criteria'>
        /// Search parameters
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<CatalogSearchResult>> SearchWithHttpMessagesAsync(SearchCriteria criteria, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (criteria == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "criteria");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("criteria", criteria);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Search", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "api/search").ToString();
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("POST");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(criteria != null)
            {
                _requestContent = SafeJsonConvert.SerializeObject(criteria, this.Client.SerializationSettings);
                _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<CatalogSearchResult>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<CatalogSearchResult>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SearchModule.
    /// </summary>
    public static partial class SearchModuleExtensions
    {
            /// <summary>
            /// Get filter properties for store
            /// </summary>
            /// Returns all store catalog properties: selected properties are ordered
            /// manually, unselected properties are ordered by name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// Store ID
            /// </param>
            public static IList<FilterProperty> GetFilterProperties(this ISearchModule operations, string storeId)
            {
                return Task.Factory.StartNew(s => ((ISearchModule)s).GetFilterPropertiesAsync(storeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filter properties for store
            /// </summary>
            /// Returns all store catalog properties: selected properties are ordered
            /// manually, unselected properties are ordered by name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// Store ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FilterProperty>> GetFilterPropertiesAsync(this ISearchModule operations, string storeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilterPropertiesWithHttpMessagesAsync(storeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set filter properties for store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// Store ID
            /// </param>
            /// <param name='filterProperties'>
            /// </param>
            public static void SetFilterProperties(this ISearchModule operations, string storeId, IList<FilterProperty> filterProperties)
            {
                Task.Factory.StartNew(s => ((ISearchModule)s).SetFilterPropertiesAsync(storeId, filterProperties), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set filter properties for store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeId'>
            /// Store ID
            /// </param>
            /// <param name='filterProperties'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetFilterPropertiesAsync(this ISearchModule operations, string storeId, IList<FilterProperty> filterProperties, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetFilterPropertiesWithHttpMessagesAsync(storeId, filterProperties, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Search for products and categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='criteria'>
            /// Search parameters
            /// </param>
            public static CatalogSearchResult Search(this ISearchModule operations, SearchCriteria criteria)
            {
                return Task.Factory.StartNew(s => ((ISearchModule)s).SearchAsync(criteria), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for products and categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='criteria'>
            /// Search parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CatalogSearchResult> SearchAsync(this ISearchModule operations, SearchCriteria criteria, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(criteria, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// SearchModule operations.
    /// </summary>
    public partial interface ISearchModule
    {
        /// <summary>
        /// Get filter properties for store
        /// </summary>
        /// Returns all store catalog properties: selected properties are
        /// ordered manually, unselected properties are ordered by name.
        /// <param name='storeId'>
        /// Store ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<FilterProperty>>> GetFilterPropertiesWithHttpMessagesAsync(string storeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Set filter properties for store
        /// </summary>
        /// <param name='storeId'>
        /// Store ID
        /// </param>
        /// <param name='filterProperties'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetFilterPropertiesWithHttpMessagesAsync(string storeId, IList<FilterProperty> filterProperties, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search for products and categories
        /// </summary>
        /// <param name='criteria'>
        /// Search parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CatalogSearchResult>> SearchWithHttpMessagesAsync(SearchCriteria criteria, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class FilterProperty
    {
        /// <summary>
        /// Initializes a new instance of the FilterProperty class.
        /// </summary>
        public FilterProperty() { }

        /// <summary>
        /// Initializes a new instance of the FilterProperty class.
        /// </summary>
        public FilterProperty(string name = default(string), bool? isSelected = default(bool?))
        {
            Name = name;
            IsSelected = isSelected;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSelected")]
        public bool? IsSelected { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class SearchCriteria
    {
        /// <summary>
        /// Initializes a new instance of the SearchCriteria class.
        /// </summary>
        public SearchCriteria() { }

        /// <summary>
        /// Initializes a new instance of the SearchCriteria class.
        /// </summary>
        public SearchCriteria(string storeId = default(string), string responseGroup = default(string), string keyword = default(string), bool? searchInChildren = default(bool?), bool? searchInVariations = default(bool?), string categoryId = default(string), IList<string> categoryIds = default(IList<string>), string catalogId = default(string), IList<string> catalogIds = default(IList<string>), string languageCode = default(string), string code = default(string), string sort = default(string), bool? hideDirectLinkedCategories = default(bool?), IList<PropertyValue> propertyValues = default(IList<PropertyValue>), string currency = default(string), double? startPrice = default(double?), double? endPrice = default(double?), int? skip = default(int?), int? take = default(int?), DateTime? indexDate = default(DateTime?), string pricelistId = default(string), IList<string> pricelistIds = default(IList<string>), IList<string> terms = default(IList<string>), IList<string> facets = default(IList<string>), string outline = default(string), bool? withHidden = default(bool?), bool? onlyBuyable = default(bool?), bool? onlyWithTrackingInventory = default(bool?), string productType = default(string), IList<string> productTypes = default(IList<string>), string vendorId = default(string), IList<string> vendorIds = default(IList<string>), DateTime? startDateFrom = default(DateTime?))
        {
            StoreId = storeId;
            ResponseGroup = responseGroup;
            Keyword = keyword;
            SearchInChildren = searchInChildren;
            SearchInVariations = searchInVariations;
            CategoryId = categoryId;
            CategoryIds = categoryIds;
            CatalogId = catalogId;
            CatalogIds = catalogIds;
            LanguageCode = languageCode;
            Code = code;
            Sort = sort;
            HideDirectLinkedCategories = hideDirectLinkedCategories;
            PropertyValues = propertyValues;
            Currency = currency;
            StartPrice = startPrice;
            EndPrice = endPrice;
            Skip = skip;
            Take = take;
            IndexDate = indexDate;
            PricelistId = pricelistId;
            PricelistIds = pricelistIds;
            Terms = terms;
            Facets = facets;
            Outline = outline;
            WithHidden = withHidden;
            OnlyBuyable = onlyBuyable;
            OnlyWithTrackingInventory = onlyWithTrackingInventory;
            ProductType = productType;
            ProductTypes = productTypes;
            VendorId = vendorId;
            VendorIds = vendorIds;
            StartDateFrom = startDateFrom;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storeId")]
        public string StoreId { get; set; }

        /// <summary>
        /// Possible values include: 'none', 'withProducts', 'withCategories',
        /// 'withProperties', 'withCatalogs', 'withVariations',
        /// 'withPriceRanges', 'withOutlines', 'full'
        /// </summary>
        [JsonProperty(PropertyName = "responseGroup")]
        public string ResponseGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "keyword")]
        public string Keyword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchInChildren")]
        public bool? SearchInChildren { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchInVariations")]
        public bool? SearchInVariations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryIds")]
        public IList<string> CategoryIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogIds")]
        public IList<string> CatalogIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sort")]
        public string Sort { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hideDirectLinkedCategories")]
        public bool? HideDirectLinkedCategories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "propertyValues")]
        public IList<PropertyValue> PropertyValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startPrice")]
        public double? StartPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endPrice")]
        public double? EndPrice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "skip")]
        public int? Skip { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "take")]
        public int? Take { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indexDate")]
        public DateTime? IndexDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pricelistId")]
        public string PricelistId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pricelistIds")]
        public IList<string> PricelistIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terms")]
        public IList<string> Terms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "facets")]
        public IList<string> Facets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outline")]
        public string Outline { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "withHidden")]
        public bool? WithHidden { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onlyBuyable")]
        public bool? OnlyBuyable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "onlyWithTrackingInventory")]
        public bool? OnlyWithTrackingInventory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productTypes")]
        public IList<string> ProductTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vendorId")]
        public string VendorId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vendorIds")]
        public IList<string> VendorIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "startDateFrom")]
        public DateTime? StartDateFrom { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PropertyValue
    {
        /// <summary>
        /// Initializes a new instance of the PropertyValue class.
        /// </summary>
        public PropertyValue() { }

        /// <summary>
        /// Initializes a new instance of the PropertyValue class.
        /// </summary>
        public PropertyValue(string id = default(string), string propertyName = default(string), string propertyId = default(string), string languageCode = default(string), string alias = default(string), string valueType = default(string), string valueId = default(string), string value = default(string), bool? isInherited = default(bool?))
        {
            Id = id;
            PropertyName = propertyName;
            PropertyId = propertyId;
            LanguageCode = languageCode;
            Alias = alias;
            ValueType = valueType;
            ValueId = valueId;
            Value = value;
            IsInherited = isInherited;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "propertyName")]
        public string PropertyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "propertyId")]
        public string PropertyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// Possible values include: 'shortText', 'longText', 'number',
        /// 'dateTime', 'boolean'
        /// </summary>
        [JsonProperty(PropertyName = "valueType")]
        public string ValueType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "valueId")]
        public string ValueId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInherited")]
        public bool? IsInherited { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class CatalogSearchResult
    {
        /// <summary>
        /// Initializes a new instance of the CatalogSearchResult class.
        /// </summary>
        public CatalogSearchResult() { }

        /// <summary>
        /// Initializes a new instance of the CatalogSearchResult class.
        /// </summary>
        public CatalogSearchResult(int? productsTotalCount = default(int?), IList<Product> products = default(IList<Product>), IList<Category> categories = default(IList<Category>), IList<Catalog> catalogs = default(IList<Catalog>), IList<Aggregation> aggregations = default(IList<Aggregation>))
        {
            ProductsTotalCount = productsTotalCount;
            Products = products;
            Categories = categories;
            Catalogs = catalogs;
            Aggregations = aggregations;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productsTotalCount")]
        public int? ProductsTotalCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "products")]
        public IList<Product> Products { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<Category> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogs")]
        public IList<Catalog> Catalogs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregations")]
        public IList<Aggregation> Aggregations { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Product
    {
        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        public Product() { }

        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        public Product(string manufacturerPartNumber = default(string), string gtin = default(string), string code = default(string), string name = default(string), string catalogId = default(string), Catalog catalog = default(Catalog), string categoryId = default(string), Category category = default(Category), string outline = default(string), IList<Category> parents = default(IList<Category>), DateTime? indexingDate = default(DateTime?), string titularItemId = default(string), bool? isBuyable = default(bool?), bool? isActive = default(bool?), bool? trackInventory = default(bool?), int? maxQuantity = default(int?), int? minQuantity = default(int?), string productType = default(string), string weightUnit = default(string), double? weight = default(double?), string packageType = default(string), string measureUnit = default(string), double? height = default(double?), double? length = default(double?), double? width = default(double?), bool? enableReview = default(bool?), int? maxNumberOfDownload = default(int?), DateTime? downloadExpiration = default(DateTime?), string downloadType = default(string), bool? hasUserAgreement = default(bool?), string shippingType = default(string), string taxType = default(string), string vendor = default(string), int? priority = default(int?), string imgSrc = default(string), IList<Property> properties = default(IList<Property>), IList<Image> images = default(IList<Image>), IList<Asset> assets = default(IList<Asset>), IList<Product> variations = default(IList<Product>), IList<CategoryLink> links = default(IList<CategoryLink>), IList<EditorialReview> reviews = default(IList<EditorialReview>), IList<ProductAssociation> associations = default(IList<ProductAssociation>), IList<string> securityScopes = default(IList<string>), string seoObjectType = default(string), IList<SeoInfo> seoInfos = default(IList<SeoInfo>), IList<Outline> outlines = default(IList<Outline>), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), string createdBy = default(string), string modifiedBy = default(string), string id = default(string))
        {
            ManufacturerPartNumber = manufacturerPartNumber;
            Gtin = gtin;
            Code = code;
            Name = name;
            CatalogId = catalogId;
            Catalog = catalog;
            CategoryId = categoryId;
            Category = category;
            Outline = outline;
            Parents = parents;
            IndexingDate = indexingDate;
            TitularItemId = titularItemId;
            IsBuyable = isBuyable;
            IsActive = isActive;
            TrackInventory = trackInventory;
            MaxQuantity = maxQuantity;
            MinQuantity = minQuantity;
            ProductType = productType;
            WeightUnit = weightUnit;
            Weight = weight;
            PackageType = packageType;
            MeasureUnit = measureUnit;
            Height = height;
            Length = length;
            Width = width;
            EnableReview = enableReview;
            MaxNumberOfDownload = maxNumberOfDownload;
            DownloadExpiration = downloadExpiration;
            DownloadType = downloadType;
            HasUserAgreement = hasUserAgreement;
            ShippingType = shippingType;
            TaxType = taxType;
            Vendor = vendor;
            Priority = priority;
            ImgSrc = imgSrc;
            Properties = properties;
            Images = images;
            Assets = assets;
            Variations = variations;
            Links = links;
            Reviews = reviews;
            Associations = associations;
            SecurityScopes = securityScopes;
            SeoObjectType = seoObjectType;
            SeoInfos = seoInfos;
            Outlines = outlines;
            CreatedDate = createdDate;
            ModifiedDate = modifiedDate;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            Id = id;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "manufacturerPartNumber")]
        public string ManufacturerPartNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gtin")]
        public string Gtin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalog")]
        public Catalog Catalog { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public Category Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outline")]
        public string Outline { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parents")]
        public IList<Category> Parents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "indexingDate")]
        public DateTime? IndexingDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "titularItemId")]
        public string TitularItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isBuyable")]
        public bool? IsBuyable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trackInventory")]
        public bool? TrackInventory { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxQuantity")]
        public int? MaxQuantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minQuantity")]
        public int? MinQuantity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productType")]
        public string ProductType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "weightUnit")]
        public string WeightUnit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "weight")]
        public double? Weight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "packageType")]
        public string PackageType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "measureUnit")]
        public string MeasureUnit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "height")]
        public double? Height { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "length")]
        public double? Length { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "width")]
        public double? Width { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enableReview")]
        public bool? EnableReview { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxNumberOfDownload")]
        public int? MaxNumberOfDownload { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadExpiration")]
        public DateTime? DownloadExpiration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadType")]
        public string DownloadType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasUserAgreement")]
        public bool? HasUserAgreement { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shippingType")]
        public string ShippingType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxType")]
        public string TaxType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vendor")]
        public string Vendor { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imgSrc")]
        public string ImgSrc { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<Property> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "images")]
        public IList<Image> Images { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<Asset> Assets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variations")]
        public IList<Product> Variations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<CategoryLink> Links { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviews")]
        public IList<EditorialReview> Reviews { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associations")]
        public IList<ProductAssociation> Associations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityScopes")]
        public IList<string> SecurityScopes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoObjectType")]
        public string SeoObjectType { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoInfos")]
        public IList<SeoInfo> SeoInfos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outlines")]
        public IList<Outline> Outlines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Catalog
    {
        /// <summary>
        /// Initializes a new instance of the Catalog class.
        /// </summary>
        public Catalog() { }

        /// <summary>
        /// Initializes a new instance of the Catalog class.
        /// </summary>
        public Catalog(string id = default(string), string name = default(string), bool? isVirtual = default(bool?), CatalogLanguage defaultLanguage = default(CatalogLanguage), IList<CatalogLanguage> languages = default(IList<CatalogLanguage>), IList<Property> properties = default(IList<Property>), IList<string> securityScopes = default(IList<string>))
        {
            Id = id;
            Name = name;
            IsVirtual = isVirtual;
            DefaultLanguage = defaultLanguage;
            Languages = languages;
            Properties = properties;
            SecurityScopes = securityScopes;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVirtual")]
        public bool? IsVirtual { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultLanguage")]
        public CatalogLanguage DefaultLanguage { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languages")]
        public IList<CatalogLanguage> Languages { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<Property> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityScopes")]
        public IList<string> SecurityScopes { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class CatalogLanguage
    {
        /// <summary>
        /// Initializes a new instance of the CatalogLanguage class.
        /// </summary>
        public CatalogLanguage() { }

        /// <summary>
        /// Initializes a new instance of the CatalogLanguage class.
        /// </summary>
        public CatalogLanguage(string catalogId = default(string), bool? isDefault = default(bool?), string languageCode = default(string), string displayName = default(string))
        {
            CatalogId = catalogId;
            IsDefault = isDefault;
            LanguageCode = languageCode;
            DisplayName = displayName;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; private set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Property
    {
        /// <summary>
        /// Initializes a new instance of the Property class.
        /// </summary>
        public Property() { }

        /// <summary>
        /// Initializes a new instance of the Property class.
        /// </summary>
        public Property(bool? isReadOnly = default(bool?), bool? isManageable = default(bool?), bool? isNew = default(bool?), string id = default(string), string catalogId = default(string), Catalog catalog = default(Catalog), string categoryId = default(string), Category category = default(Category), string name = default(string), bool? required = default(bool?), bool? dictionary = default(bool?), bool? multivalue = default(bool?), bool? multilanguage = default(bool?), string valueType = default(string), string type = default(string), IList<PropertyValue> values = default(IList<PropertyValue>), IList<PropertyDictionaryValue> dictionaryValues = default(IList<PropertyDictionaryValue>), IList<PropertyAttribute> attributes = default(IList<PropertyAttribute>), IList<PropertyDisplayName> displayNames = default(IList<PropertyDisplayName>), bool? isInherited = default(bool?))
        {
            IsReadOnly = isReadOnly;
            IsManageable = isManageable;
            IsNew = isNew;
            Id = id;
            CatalogId = catalogId;
            Catalog = catalog;
            CategoryId = categoryId;
            Category = category;
            Name = name;
            Required = required;
            Dictionary = dictionary;
            Multivalue = multivalue;
            Multilanguage = multilanguage;
            ValueType = valueType;
            Type = type;
            Values = values;
            DictionaryValues = dictionaryValues;
            Attributes = attributes;
            DisplayNames = displayNames;
            IsInherited = isInherited;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isReadOnly")]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isManageable")]
        public bool? IsManageable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isNew")]
        public bool? IsNew { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalog")]
        public Catalog Catalog { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public Category Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "required")]
        public bool? Required { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dictionary")]
        public bool? Dictionary { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multivalue")]
        public bool? Multivalue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multilanguage")]
        public bool? Multilanguage { get; set; }

        /// <summary>
        /// Possible values include: 'shortText', 'longText', 'number',
        /// 'dateTime', 'boolean'
        /// </summary>
        [JsonProperty(PropertyName = "valueType")]
        public string ValueType { get; set; }

        /// <summary>
        /// Possible values include: 'product', 'variation', 'category',
        /// 'catalog'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "values")]
        public IList<PropertyValue> Values { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dictionaryValues")]
        public IList<PropertyDictionaryValue> DictionaryValues { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public IList<PropertyAttribute> Attributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayNames")]
        public IList<PropertyDisplayName> DisplayNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInherited")]
        public bool? IsInherited { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Category
    {
        /// <summary>
        /// Initializes a new instance of the Category class.
        /// </summary>
        public Category() { }

        /// <summary>
        /// Initializes a new instance of the Category class.
        /// </summary>
        public Category(string parentId = default(string), bool? isVirtual = default(bool?), string code = default(string), string taxType = default(string), Catalog catalog = default(Catalog), string catalogId = default(string), string name = default(string), string path = default(string), bool? isActive = default(bool?), IList<Category> parents = default(IList<Category>), IList<Category> children = default(IList<Category>), IList<Property> properties = default(IList<Property>), IList<CategoryLink> links = default(IList<CategoryLink>), string imgSrc = default(string), IList<Image> images = default(IList<Image>), IList<string> securityScopes = default(IList<string>), string seoObjectType = default(string), IList<SeoInfo> seoInfos = default(IList<SeoInfo>), IList<Outline> outlines = default(IList<Outline>), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), string createdBy = default(string), string modifiedBy = default(string), string id = default(string))
        {
            ParentId = parentId;
            IsVirtual = isVirtual;
            Code = code;
            TaxType = taxType;
            Catalog = catalog;
            CatalogId = catalogId;
            Name = name;
            Path = path;
            IsActive = isActive;
            Parents = parents;
            Children = children;
            Properties = properties;
            Links = links;
            ImgSrc = imgSrc;
            Images = images;
            SecurityScopes = securityScopes;
            SeoObjectType = seoObjectType;
            SeoInfos = seoInfos;
            Outlines = outlines;
            CreatedDate = createdDate;
            ModifiedDate = modifiedDate;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            Id = id;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentId")]
        public string ParentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isVirtual")]
        public bool? IsVirtual { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxType")]
        public string TaxType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalog")]
        public Catalog Catalog { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parents")]
        public IList<Category> Parents { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public IList<Category> Children { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<Property> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<CategoryLink> Links { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imgSrc")]
        public string ImgSrc { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "images")]
        public IList<Image> Images { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "securityScopes")]
        public IList<string> SecurityScopes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoObjectType")]
        public string SeoObjectType { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoInfos")]
        public IList<SeoInfo> SeoInfos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "outlines")]
        public IList<Outline> Outlines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class CategoryLink
    {
        /// <summary>
        /// Initializes a new instance of the CategoryLink class.
        /// </summary>
        public CategoryLink() { }

        /// <summary>
        /// Initializes a new instance of the CategoryLink class.
        /// </summary>
        public CategoryLink(int? priority = default(int?), string sourceItemId = default(string), string sourceCategoryId = default(string), string catalogId = default(string), string categoryId = default(string))
        {
            Priority = priority;
            SourceItemId = sourceItemId;
            SourceCategoryId = sourceCategoryId;
            CatalogId = catalogId;
            CategoryId = categoryId;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceItemId")]
        public string SourceItemId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sourceCategoryId")]
        public string SourceCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "catalogId")]
        public string CatalogId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categoryId")]
        public string CategoryId { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Image
    {
        /// <summary>
        /// Initializes a new instance of the Image class.
        /// </summary>
        public Image() { }

        /// <summary>
        /// Initializes a new instance of the Image class.
        /// </summary>
        public Image(string id = default(string), string relativeUrl = default(string), string url = default(string), string typeId = default(string), string group = default(string), string name = default(string), string languageCode = default(string), bool? isInherited = default(bool?))
        {
            Id = id;
            RelativeUrl = relativeUrl;
            Url = url;
            TypeId = typeId;
            Group = group;
            Name = name;
            LanguageCode = languageCode;
            IsInherited = isInherited;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relativeUrl")]
        public string RelativeUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public string TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInherited")]
        public bool? IsInherited { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class SeoInfo
    {
        /// <summary>
        /// Initializes a new instance of the SeoInfo class.
        /// </summary>
        public SeoInfo() { }

        /// <summary>
        /// Initializes a new instance of the SeoInfo class.
        /// </summary>
        public SeoInfo(string name = default(string), string semanticUrl = default(string), string pageTitle = default(string), string metaDescription = default(string), string imageAltDescription = default(string), string metaKeywords = default(string), string storeId = default(string), string objectId = default(string), string objectType = default(string), bool? isActive = default(bool?), string languageCode = default(string), DateTime? createdDate = default(DateTime?), DateTime? modifiedDate = default(DateTime?), string createdBy = default(string), string modifiedBy = default(string), string id = default(string))
        {
            Name = name;
            SemanticUrl = semanticUrl;
            PageTitle = pageTitle;
            MetaDescription = metaDescription;
            ImageAltDescription = imageAltDescription;
            MetaKeywords = metaKeywords;
            StoreId = storeId;
            ObjectId = objectId;
            ObjectType = objectType;
            IsActive = isActive;
            LanguageCode = languageCode;
            CreatedDate = createdDate;
            ModifiedDate = modifiedDate;
            CreatedBy = createdBy;
            ModifiedBy = modifiedBy;
            Id = id;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "semanticUrl")]
        public string SemanticUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pageTitle")]
        public string PageTitle { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metaDescription")]
        public string MetaDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "imageAltDescription")]
        public string ImageAltDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "metaKeywords")]
        public string MetaKeywords { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "storeId")]
        public string StoreId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "objectId")]
        public string ObjectId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "objectType")]
        public string ObjectType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isActive")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedDate")]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Outline
    {
        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline() { }

        /// <summary>
        /// Initializes a new instance of the Outline class.
        /// </summary>
        public Outline(IList<OutlineItem> items = default(IList<OutlineItem>))
        {
            Items = items;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<OutlineItem> Items { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class OutlineItem
    {
        /// <summary>
        /// Initializes a new instance of the OutlineItem class.
        /// </summary>
        public OutlineItem() { }

        /// <summary>
        /// Initializes a new instance of the OutlineItem class.
        /// </summary>
        public OutlineItem(string id = default(string), string seoObjectType = default(string), IList<SeoInfo> seoInfos = default(IList<SeoInfo>), bool? hasVirtualParent = default(bool?))
        {
            Id = id;
            SeoObjectType = seoObjectType;
            SeoInfos = seoInfos;
            HasVirtualParent = hasVirtualParent;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoObjectType")]
        public string SeoObjectType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "seoInfos")]
        public IList<SeoInfo> SeoInfos { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasVirtualParent")]
        public bool? HasVirtualParent { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PropertyDictionaryValue
    {
        /// <summary>
        /// Initializes a new instance of the PropertyDictionaryValue class.
        /// </summary>
        public PropertyDictionaryValue() { }

        /// <summary>
        /// Initializes a new instance of the PropertyDictionaryValue class.
        /// </summary>
        public PropertyDictionaryValue(string id = default(string), string propertyId = default(string), string alias = default(string), string languageCode = default(string), string value = default(string))
        {
            Id = id;
            PropertyId = propertyId;
            Alias = alias;
            LanguageCode = languageCode;
            Value = value;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "propertyId")]
        public string PropertyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PropertyAttribute
    {
        /// <summary>
        /// Initializes a new instance of the PropertyAttribute class.
        /// </summary>
        public PropertyAttribute() { }

        /// <summary>
        /// Initializes a new instance of the PropertyAttribute class.
        /// </summary>
        public PropertyAttribute(string id = default(string), Property property = default(Property), string value = default(string), string name = default(string))
        {
            Id = id;
            Property = property;
            Value = value;
            Name = name;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "property")]
        public Property Property { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class PropertyDisplayName
    {
        /// <summary>
        /// Initializes a new instance of the PropertyDisplayName class.
        /// </summary>
        public PropertyDisplayName() { }

        /// <summary>
        /// Initializes a new instance of the PropertyDisplayName class.
        /// </summary>
        public PropertyDisplayName(string name = default(string), string languageCode = default(string))
        {
            Name = name;
            LanguageCode = languageCode;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Asset
    {
        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        public Asset() { }

        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        public Asset(long? size = default(long?), string mimeType = default(string), string id = default(string), string relativeUrl = default(string), string url = default(string), string typeId = default(string), string group = default(string), string name = default(string), string languageCode = default(string), bool? isInherited = default(bool?))
        {
            Size = size;
            MimeType = mimeType;
            Id = id;
            RelativeUrl = relativeUrl;
            Url = url;
            TypeId = typeId;
            Group = group;
            Name = name;
            LanguageCode = languageCode;
            IsInherited = isInherited;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public long? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relativeUrl")]
        public string RelativeUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeId")]
        public string TypeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "group")]
        public string Group { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInherited")]
        public bool? IsInherited { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class EditorialReview
    {
        /// <summary>
        /// Initializes a new instance of the EditorialReview class.
        /// </summary>
        public EditorialReview() { }

        /// <summary>
        /// Initializes a new instance of the EditorialReview class.
        /// </summary>
        public EditorialReview(string id = default(string), string content = default(string), string reviewType = default(string), string languageCode = default(string), bool? isInherited = default(bool?))
        {
            Id = id;
            Content = content;
            ReviewType = reviewType;
            LanguageCode = languageCode;
            IsInherited = isInherited;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reviewType")]
        public string ReviewType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "languageCode")]
        public string LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isInherited")]
        public bool? IsInherited { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class ProductAssociation
    {
        /// <summary>
        /// Initializes a new instance of the ProductAssociation class.
        /// </summary>
        public ProductAssociation() { }

        /// <summary>
        /// Initializes a new instance of the ProductAssociation class.
        /// </summary>
        public ProductAssociation(string type = default(string), int? priority = default(int?), string associatedObjectId = default(string), string associatedObjectName = default(string), string associatedObjectType = default(string), string associatedObjectImg = default(string), IList<string> tags = default(IList<string>))
        {
            Type = type;
            Priority = priority;
            AssociatedObjectId = associatedObjectId;
            AssociatedObjectName = associatedObjectName;
            AssociatedObjectType = associatedObjectType;
            AssociatedObjectImg = associatedObjectImg;
            Tags = tags;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associatedObjectId")]
        public string AssociatedObjectId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associatedObjectName")]
        public string AssociatedObjectName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associatedObjectType")]
        public string AssociatedObjectType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "associatedObjectImg")]
        public string AssociatedObjectImg { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Aggregation
    {
        /// <summary>
        /// Initializes a new instance of the Aggregation class.
        /// </summary>
        public Aggregation() { }

        /// <summary>
        /// Initializes a new instance of the Aggregation class.
        /// </summary>
        public Aggregation(string aggregationType = default(string), string field = default(string), IList<AggregationLabel> labels = default(IList<AggregationLabel>), IList<AggregationItem> items = default(IList<AggregationItem>))
        {
            AggregationType = aggregationType;
            Field = field;
            Labels = labels;
            Items = items;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aggregationType")]
        public string AggregationType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "field")]
        public string Field { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<AggregationLabel> Labels { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<AggregationItem> Items { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class AggregationLabel
    {
        /// <summary>
        /// Initializes a new instance of the AggregationLabel class.
        /// </summary>
        public AggregationLabel() { }

        /// <summary>
        /// Initializes a new instance of the AggregationLabel class.
        /// </summary>
        public AggregationLabel(string language = default(string), string label = default(string))
        {
            Language = language;
            Label = label;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

    }
}
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace VirtoCommerce.Storefront.AutoRestClients.SearchModuleApi.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class AggregationItem
    {
        /// <summary>
        /// Initializes a new instance of the AggregationItem class.
        /// </summary>
        public AggregationItem() { }

        /// <summary>
        /// Initializes a new instance of the AggregationItem class.
        /// </summary>
        public AggregationItem(object value = default(object), int? count = default(int?), bool? isApplied = default(bool?), IList<AggregationLabel> labels = default(IList<AggregationLabel>))
        {
            Value = value;
            Count = count;
            IsApplied = isApplied;
            Labels = labels;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isApplied")]
        public bool? IsApplied { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "labels")]
        public IList<AggregationLabel> Labels { get; set; }

    }
}
